/*
*
* Lib.cs: utility functions for use with the GameOfWar project
* Do not edit this file!
*
*/

namespace GameOfWar
{
    public class Lib
    {
        public static void RunGame(GameState state, Func<GameState, int, bool> turnFunction)
        {
            while (state.Winner == string.Empty)
            {
                Console.WriteLine($"You have {state.PlayerDeck.Count} cards");
                Console.WriteLine($"Your opponent has {state.ComputerDeck.Count} cards");

                // Player's next 5 cards to choose from
                List<Card> playerCards = GetNextPlayerCards(state.PlayerDeck);

                // Player chooses a card
                int userSelection = GetUserSelection(playerCards);
                if (userSelection == -1)
                {
                    Console.WriteLine();
                    Console.WriteLine("Thanks for playing!");
                    Console.WriteLine();
                    return;
                }

                // Show the two cards to the player
                PrintPlayerComputerCards(playerCards[userSelection], state.ComputerDeck.CardAtIndex(0));

                // Student-provided function to handle each round
                turnFunction(state, userSelection);
            }

            Console.WriteLine($"{state.Winner} wins!");
        }

        private static int GetUserSelection(List<Card> cards)
        {
            string option = PrintTurn(cards).Trim();
            if (option == "q")
            {
                return -1;
            }
            int optionVal;
            while (!int.TryParse(option, out optionVal) || optionVal > cards.Count)
            {
                Console.WriteLine($"{option} is not an option!Try again!");
                option = PrintTurn(cards);
            }
            return optionVal - 1;
        }

        private static void PrintPlayerComputerCards(Card playerCard, Card computerCard)
        {
            PrintSeparator();
            Console.WriteLine("    YOU        COMPUTER");
            Console.WriteLine($"  --------     --------");
            Console.WriteLine($" /        \\  /        \\");
            Console.WriteLine($" |{PadSuit(playerCard.Suit)}|  |{PadSuit(computerCard.Suit)}|");
            Console.WriteLine($" |{PadRank(playerCard.RankString())}|  |{PadSuit(computerCard.RankString())}|");
            Console.WriteLine(" \\        /  \\        /");
            Console.WriteLine("  --------     --------");
            PrintSeparator();
        }

        private static List<Card> GetNextPlayerCards(Deck deck)
        {
            List<Card> playerCards = new List<Card>();
            int limit = deck.Count >= 5 ? 5 : deck.Count;
            for (int i = 0; i < limit; i++)
            {
                playerCards.Add(deck.CardAtIndex(i));
            }
            return playerCards;
        }

        private static string PrintTurn(List<Card> cards)
        {
            Console.WriteLine();
            Console.WriteLine("Your current cards are:");
            Console.WriteLine();
            PrintCards(cards);
            Console.WriteLine();
            Console.Write("Which card would you like to play ('q' to quit)? ");
            string? option = Console.ReadLine();
            return option ?? string.Empty;
        }

        private static void PrintSeparator()
        {
            Console.WriteLine();
            Console.WriteLine("-------------------------------------------------------------------------------------------");
            Console.WriteLine();
        }

        private static void PrintCards(List<Card> cards)
        {
            Console.WriteLine(GenerateCardTops(cards.Count));
            Console.WriteLine(GenerateCardTopRadii(cards.Count));
            Console.WriteLine(GenerateCardSuits(cards));
            Console.WriteLine(GenerateCardRanks(cards));
            Console.WriteLine(GenerateCardBottomRadii(cards.Count));
            Console.WriteLine(GenerateCardTops(cards.Count));
            Console.WriteLine(GenerateCardNumbers(cards.Count));
        }

        private static string GenerateCardTops(int count)
        {
            string returnString = string.Empty;
            for (int i = 0; i < count; i++)
            {
                returnString += "  --------  ";
            }
            return returnString;
        }

        private static string GenerateCardTopRadii(int count)
        {
            string returnString = string.Empty;
            for (int i = 0; i < count; i++)
            {
                returnString += " /        \\ ";
            }
            return returnString;
        }

        private static string GenerateCardBottomRadii(int count)
        {
            string returnString = string.Empty;
            for (int i = 0; i < count; i++)
            {
                returnString += " \\        / ";
            }
            return returnString;
        }

        private static string GenerateCardSuits(List<Card> cards)
        {
            string returnString = string.Empty;
            for (int i = 0; i < cards.Count; i++)
            {
                returnString += $" |{PadSuit(cards[i].Suit)}| ";
            }
            return returnString;
        }

        private static string GenerateCardRanks(List<Card> cards)
        {
            string returnString = string.Empty;
            for (int i = 0; i < cards.Count; i++)
            {
                returnString += $" |{PadRank(cards[i].RankString())}| ";
            }
            return returnString;
        }

        private static string GenerateCardNumbers(int count)
        {
            string returnString = string.Empty;
            for (int i = 0; i < count; i++)
            {
                returnString += $"     {i + 1}      ";
            }
            return returnString;
        }

        private static string PadSuit(string suit)
        {
            return suit.PadLeft(7).PadRight(8);
        }

        private static string PadRank(string rank)
        {
            return rank.PadLeft(4).PadRight(8);
        }
    }
}